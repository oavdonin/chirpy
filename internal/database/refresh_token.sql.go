// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_token.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt *time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ExpiresAt,
	)
	return err
}

const getRefreshTokenAttrs = `-- name: GetRefreshTokenAttrs :one
SELECT user_id, expires_at, revoked_at FROM refresh_tokens WHERE token = $1
`

type GetRefreshTokenAttrsRow struct {
	UserID    uuid.UUID
	ExpiresAt *time.Time
	RevokedAt *time.Time
}

func (q *Queries) GetRefreshTokenAttrs(ctx context.Context, token string) (GetRefreshTokenAttrsRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenAttrs, token)
	var i GetRefreshTokenAttrsRow
	err := row.Scan(&i.UserID, &i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens SET revoked_at = $2, updated_at = $3 WHERE token = $1
`

type RevokeRefreshTokenParams struct {
	Token     string
	RevokedAt *time.Time
	UpdatedAt time.Time
}

func (q *Queries) RevokeRefreshToken(ctx context.Context, arg RevokeRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, arg.Token, arg.RevokedAt, arg.UpdatedAt)
	return err
}
